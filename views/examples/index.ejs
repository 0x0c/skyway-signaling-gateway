<!doctype html>
<html lang="ja">
  <head>
    <meta charset="utf-8">
    <script type='text/javascript' src='https://cdn.skyway.io/skyway.js'></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/3.3.0/adapter.js"></script>
    <script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"></script>
  </head>
  <body>
    <div>
      <div class="left">
        <h3>content</h3>
        <div id="content">
          <h4>datachannel</h4>
          <p>
            <form id="form-start">
              <input type="text" id="dst-peer" placeholder="input peer id"><input type="submit" value="start">
            </form>
            <strong>local</strong> : <span id="datachannel-sent"></span>
            <br />
            <strong>echo</strong> : <span id="datachannel-received"></span>
          </p>

          <h4>streaming</h4>
          <p>
            <input type="text" id="mypeerid" readonly>
            <button id="start-streaming" disabled="">start</button><br />
          </p>
          <p>
            <video id="streaming" width="640" height="480" autoplay></video>
          </p>

          <h4>send voice stream</h4>
          <p>
            <button id="start-sending-voice">start sending voice test</button>
            <span id="mesg-sending-voice">idle</span>
          </p>
        </div>
      </div>
    </div>

    <script>
    let dst_peer = localStorage.dst_peer;
    $("#dst-peer").val(dst_peer)
    /**
     * start peer connection
     *
     * @param {object} iceServers - ice server setting object
     *
     */
    function start(iceServers) {
      var peer = new Peer({
        key: "<%= apikey %>",
        config: {"iceServers": iceServers},
        debug: 3
      })

      peer.on("open", id => {
        $("#mypeerid").val(id);

        $("#start-sending-voice").on("click", e => startSendingVoice())
        $("#form-start").on("submit", e => startDataChannel(e))
      })

      // this is for streaming plugin
      peer.on("call", call =>{
        call.answer()

        call.on("stream", stream => {
          $("#streaming").attr("src", window.URL.createObjectURL(stream))
        })
      })


      // start media echo
      startSendingVoice = () => {
        // disable button
        $("#start-sending-voice").attr("disabled", "disabled")

        // start getting localmedia stream
        navigator.mediaDevices.getUserMedia({audio: true, video: false})
          .then(stream => {
            $("#mesg-sending-voice").text("sending voice stream...")
            startCall(stream);
          }).catch(err => log(err));
      }

      startCall = (stream) => {
        var call = peer.call(dst_peer, stream);
      }

      // start datachannel echo
      startDataChannel = (ev) => {
        ev.preventDefault();
        // disable button
        $("#start-datachannel").attr("disabled", "disabled")
        dst_peer = $("#dst-peer").val()
        if(!!dst_peer === false) return;
        localStorage.dst_peer = dst_peer;
        console.log(dst_peer)

        var conn = peer.connect(dst_peer, {serialization: "none", reliable: true})
        conn.on('open', () => {
          conn.on('data', data => $("#datachannel-received").text(data) )

          setInterval( e => {
            let mesg = `timestamp "${Date.now()}"`
            $("#datachannel-sent").text(mesg)
            conn.send(mesg)
          }, 1000)

          enableStreamingBtn(conn);
        })
      }

      enableStreamingBtn = (conn) => {
        $("#start-streaming").attr("disabled", false).on("click", function(ev){
          if($(this).text() === 'start') {
            let mypeerid = $("#mypeerid").val();
            conn.send(`SSG:stream/start,${mypeerid}`)
            $(this).text("stop")
          } else {
            conn.send(`SSG:stream/stop`)
            $(this).text("start")
          }
        })
      }

    }

    /**
     * get credential from turn rest api server, then start.
     *
     */
    $.get("https://turn-rest.skyway.io/api/", {
      "api": "myvalidkey"  // TURN REST API KEY
    }).done((turncredential) => {
      let credential = JSON.parse(turncredential);

      let iceServers = credential.uris.map((uri) => {
        return {
          "username": credential.username,
          "credential": credential.password,
          "url": uri
        }
      });
      // prepend stun url in array of iceServers setting
      iceServers.unshift({ 'url': 'stun:stun.l.google.com:19302' });

      // start connection for SkyWay signaling server
      start(iceServers);
    }).fail((err) => {
      console.warn(err);
    });

    </script>
  </body>
</html>
